{"version":3,"sources":["subRedditNavigation/subRedditItem.js","subRedditNavigation/subRedditNavigation.js","subRedditNavigation/posts/subRedditPostItem.js","subRedditNavigation/posts/subRedditPosts.js","App.js","serviceWorker.js","index.js"],"names":["SubRedditItem","props","onClick","itemSelected","item","className","selected","data","display_name","SubRedditNavigation","items","map","key","id","url","activeUrl","SubRedditPost","selectedPostId","title","src","thumbnail","alt","author_fullname","selftext","score","num_comments","href","target","SubRedditPosts","state","togglePanel","bind","e","this","setState","length","React","Component","initialState","navigationItems","selectedSubreddit","postItems","reducer","action","type","payload","Error","postsCallbackName","App","useReducer","dispatch","useEffect","documentHead","document","head","cbname","Date","now","script","createElement","window","jsonData","children","removeChild","appendChild","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1861cb93.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function SubRedditItem(props) {\n  return (\n    <li\n      onClick={() => {\n        props.itemSelected(props.item);\n      }}\n      className={props.selected ? \"selected\" : \"\"}\n    >\n      {props.item.data.display_name}\n    </li>\n  );\n}\n","import \"./subRedditNavigation.css\";\nimport React from \"react\";\nimport SubRedditItem from \"./subRedditItem\";\n\nexport default function SubRedditNavigation(props) {\n  return (\n    <ul className=\"navigation\">\n      {props.items.map((item) => (\n        <SubRedditItem\n          item={item}\n          itemSelected={props.itemSelected}\n          key={item.data.id}\n          selected={item.data.url === props.activeUrl}\n        />\n      ))}\n    </ul>\n  );\n}\n","import React from \"react\";\n\nexport default function SubRedditPost(props) {\n  return (\n    <div>\n      <p\n        onClick={() => {\n          props.itemSelected(props.item);\n        }}\n        className={\n          props.selectedPostId === props.item.data.id ? \"selectedPost\" : \"post\"\n        }\n      >\n        {props.item.data.title}\n      </p>\n      {props.selectedPostId === props.item.data.id ? (\n        <div className=\"card\">\n          <img\n            className=\"cardImage\"\n            src={props.item.data.thumbnail}\n            alt=\"\"></img>\n          <p className=\"cardTitle\"> {props.item.data.title} </p>\n          <p>         \n            <span className=\"postedBy\">Posted By: </span>\n            <span className=\"author\">{props.item.data.author_fullname}</span>\n          </p>\n          <p className=\"description\"> {props.item.data.selftext} </p>\n          <table>\n            <thead>\n              <tr>\n                <th> Score </th> \n                <th> Comments </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td> {props.item.data.score} </td>\n                <td> {props.item.data.num_comments} </td>\n              </tr>\n            </tbody>\n          </table>\n          <a href={props.item.data.url} target=\"_blank\"> Read More </a>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import \"./subRedditPosts.css\";\nimport React from \"react\";\nimport SubRedditPostItem from \"./subRedditPostItem\";\n\nconst initialState = {\n  id: null,\n};\n\nexport default class SubRedditPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: null,\n    };\n    this.togglePanel = this.togglePanel.bind(this);\n  }\n\n  togglePanel(e) {\n    {\n      this.state.id === e.id\n        ? this.setState({ id: null })\n        : this.setState({ id: e.id });\n    }\n  }\n\n  handleClickOutside() {\n    this.setState({ id: null });\n  }\n\n  resetBuilder() {\n    this.setState({ id: null });\n  }\n\n  render() {\n    return (\n      <div className=\"postItem\">\n        {this.props.items.length > 0 ? (\n          <ul>\n            {this.props.items.map((item) => (\n              <SubRedditPostItem\n                item={item}\n                itemSelected={(e) => this.togglePanel(item.data)}\n                key={item.data.id}\n                selectedPostId={this.state.id}\n              />\n            ))}\n          </ul>\n        ) : (\n          <h2> Click on a Sub Reddit item in the list to preview here </h2>\n        )}\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport React, { useEffect, useReducer } from \"react\";\nimport SubRedditNavigation from \"./subRedditNavigation/subRedditNavigation\";\nimport SubRedditPosts from \"./subRedditNavigation/posts/subRedditPosts\";\n\nconst initialState = {\n  navigationItems: [],\n  selectedSubreddit: null,\n  postItems: [],\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"set-navigation-items\":\n      return {\n        ...state,\n        navigationItems: action.payload,\n      };\n    case \"set-selected-subreddit\":\n      return {\n        ...state,\n        selectedSubreddit: action.payload,\n        postItems: [],\n      };\n    case \"set-post-items\":\n      return {\n        ...state,\n        postItems: action.payload,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nlet postsCallbackName = null;\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const documentHead = document.head;\n    if (documentHead == null)\n      throw new Error(\"No <head> to use for script injection.\");\n\n    const cbname = `fn${Date.now()}`;\n    const script = document.createElement(\"script\");\n    script.src = `https://www.reddit.com/reddits.json?jsonp=${cbname}`;\n    window[cbname] = (jsonData) => {\n      dispatch({\n        payload: jsonData.data.children,\n        type: \"set-navigation-items\",\n      });\n      delete window[cbname];\n      documentHead.removeChild(script);\n    };\n\n    documentHead.appendChild(script);\n  }, []);\n\n  const setSelectedItem = (item) => {\n    const documentHead = document.head;\n    if (documentHead == null)\n      throw new Error(\"No <head> to use for script injection.\");\n\n    const cbname = (postsCallbackName = `fn${Date.now()}`);\n    const script = document.createElement(\"script\");\n    script.src = `https://www.reddit.com${item.data.url}.json?sort=top&t=month&jsonp=${cbname}`;\n    window[cbname] = (jsonData) => {\n      if (cbname === postsCallbackName) {\n        dispatch({\n          payload: jsonData.data.children,\n          type: \"set-post-items\",\n        });\n      }\n\n      delete window[cbname];\n      documentHead.removeChild(script);\n    };\n\n    documentHead.appendChild(script);\n\n    dispatch({\n      payload: item,\n      type: \"set-selected-subreddit\",\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <SubRedditNavigation\n        activeUrl={\n          state.selectedSubreddit == null\n            ? null\n            : state.selectedSubreddit.data.url\n        }\n        items={state.navigationItems}\n        itemSelected={setSelectedItem}\n      />\n      <SubRedditPosts items={state.postItems} />\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}